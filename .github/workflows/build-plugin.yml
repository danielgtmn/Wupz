name: Build WordPress Plugin

on:
  push:
    tags: [ 'v*' ]

jobs:
  build:
    name: Build Plugin Package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get plugin version
      id: version
      run: |
        VERSION=$(grep "Version:" wupz-plugin/wupz.php | head -1 | awk -F: '{print $2}' | xargs)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Plugin version: $VERSION"
    
    - name: Create build directory
      run: |
        mkdir -p build/wupz
        echo "Build directory created"
    
    - name: Copy plugin files
      run: |
        echo "Copying plugin files..."
        
        # Copy main plugin files
        cp -r wupz-plugin/* build/wupz/
        
                 # Create readme.txt for WordPress.org (if not exists)
         if [ ! -f "build/wupz/readme.txt" ]; then
           echo "Creating WordPress.org readme.txt file..."
           echo "=== Wupz - WordPress Backup Plugin ===" > build/wupz/readme.txt
           echo "Contributors: wupzbackup" >> build/wupz/readme.txt
           echo "Tags: backup, database, files, scheduled, zip" >> build/wupz/readme.txt
           echo "Requires at least: 5.0" >> build/wupz/readme.txt
           echo "Tested up to: 6.3" >> build/wupz/readme.txt
           echo "Requires PHP: 7.4" >> build/wupz/readme.txt
           echo "Stable tag: 1.0.0" >> build/wupz/readme.txt
           echo "License: GPLv2 or later" >> build/wupz/readme.txt
           echo "License URI: https://www.gnu.org/licenses/gpl-2.0.html" >> build/wupz/readme.txt
           echo "" >> build/wupz/readme.txt
           echo "A comprehensive WordPress backup plugin that allows manual and scheduled backups." >> build/wupz/readme.txt
           echo "" >> build/wupz/readme.txt
           echo "== Description ==" >> build/wupz/readme.txt
           echo "" >> build/wupz/readme.txt
           echo "Wupz is a powerful and easy-to-use WordPress backup plugin." >> build/wupz/readme.txt
         fi
        
        echo "✅ Plugin files copied successfully"
    
    - name: Remove development files
      run: |
        echo "Removing development files..."
        
        # Remove any development/build files that shouldn't be in the package
        find build/wupz -name ".git*" -delete 2>/dev/null || true
        find build/wupz -name "*.log" -delete 2>/dev/null || true
        find build/wupz -name "node_modules" -type d -exec rm -rf {} + 2>/dev/null || true
        find build/wupz -name ".DS_Store" -delete 2>/dev/null || true
        
        echo "✅ Development files removed"
    
    - name: Validate plugin package
      run: |
        echo "Validating plugin package..."
        
        # Check that main plugin file exists
        if [ ! -f "build/wupz/wupz.php" ]; then
          echo "❌ Main plugin file missing from package"
          exit 1
        fi
        
        # Check plugin header
        if ! grep -q "Plugin Name:" build/wupz/wupz.php; then
          echo "❌ Plugin header missing"
          exit 1
        fi
        
        # List package contents
        echo "📦 Package contents:"
        find build/wupz -type f | sort
        
        echo "✅ Plugin package validation passed"
    
    - name: Create ZIP package
      run: |
        echo "Creating ZIP package..."
        cd build
        zip -r "../wupz-${{ steps.version.outputs.version }}.zip" wupz/
        cd ..
        
        # Verify ZIP was created
        if [ ! -f "wupz-${{ steps.version.outputs.version }}.zip" ]; then
          echo "❌ Failed to create ZIP package"
          exit 1
        fi
        
        echo "✅ ZIP package created: wupz-${{ steps.version.outputs.version }}.zip"
        echo "📦 Package size: $(du -h wupz-${{ steps.version.outputs.version }}.zip | cut -f1)"
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: wupz-plugin-${{ steps.version.outputs.version }}
        path: wupz-${{ steps.version.outputs.version }}.zip
        retention-days: 30
    
    - name: Upload build directory artifact
      uses: actions/upload-artifact@v4
      with:
        name: wupz-plugin-build-${{ steps.version.outputs.version }}
        path: build/
        retention-days: 7

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get plugin version
      id: version
      run: |
        VERSION=$(grep "Version:" wupz-plugin/wupz.php | head -1 | awk -F: '{print $2}' | xargs)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: wupz-plugin-${{ steps.version.outputs.version }}
        path: ./
    
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Wupz v${{ steps.version.outputs.version }}
        body: |
          ## Wupz WordPress Backup Plugin v${{ steps.version.outputs.version }}
          
          ### Installation
          1. Download the `wupz-${{ steps.version.outputs.version }}.zip` file below
          2. Go to WordPress Admin → Plugins → Add New → Upload Plugin
          3. Upload the ZIP file and activate the plugin
          
          ### Features
          - Manual and scheduled backups
          - Database and file backups
          - Email notifications
          - System status monitoring
          - Easy-to-use admin interface
          
          ### Documentation
          Visit our [Wiki](https://github.com/danielgtmn/Wupz/wiki) for detailed documentation.
          
          ---
          **Full Changelog**: https://github.com/danielgtmn/Wupz/compare/v${{ steps.version.outputs.version }}
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./wupz-${{ steps.version.outputs.version }}.zip
        asset_name: wupz-${{ steps.version.outputs.version }}.zip
        asset_content_type: application/zip



 